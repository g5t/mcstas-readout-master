#!/usr/bin/env python3

import sys

pyversion = sys.version_info[0:3]
MIN_PY_VERSION = (3, 6, 0)
if pyversion < (3, 0, 0):
    raise SystemExit('readout-config does not support Python2.')
if pyversion < MIN_PY_VERSION:
    raise SystemExit(f'ERROR: Unsupported python version {pyversion} detected (needs {MIN_PY_VERSION} or later).')

import pathlib
import argparse
import shlex

#fs-path aware quote:
shell_quote = lambda s: shlex.quote(str(s) if hasattr(s, '__fspath__') else s)


# Information filled out by CMake (todo: put all logic below on cmake-side?):
installation_info = dict(
    libdir='@Readout_BIN2LIB@',
    includedir='@Readout_BIN2INC@',
    compdir='@Readout_BIN2DATA@',
    libname='@Readout_LIBNAME@',
    version='@Readout_VERSION@',
    bindir='.',  # by definition, since readout-config is always installed in this directory
    ldflags='-Wl,-rpath,<LIBDIR> -L<LIBDIR> -l@Readout_LIBNAME@'.strip(),  # expand LIBDIR dynamically below
    cflags='-I<INCLUDEDIR>',  # expand INCLUDEDIR dynamically below
    )


__version__ = installation_info['version']


if installation_info.get('libdir', '@').startswith('@'):
    raise SystemExit('ERROR: readout-config script can only be used after installation via CMake')


OPTIONS = list(sorted(key[4:] for key in installation_info if key.startswith('opt_')))
INFO = list(sorted(key for key in installation_info if not key.startswith('opt_')))


def lookup_choice(name):
    info = installation_info[name]
    if info is None:
        # represent missing info with empty string.
        return ''
    if name in ['libname', 'version']:
        # not a resolvable path
        return info
    elif name == 'ldflags':
        return info.replace('<LIBDIR>', shell_quote(lookup_choice('libdir')))
    elif name == 'cflags':
        return info.replace('<INCLUDEDIR>', shell_quote(lookup_choice('includedir')))
    p = pathlib.Path(__file__).parent.joinpath(info).absolute()
    if not p.exists():
        raise SystemExit('Could not find path to %s (expected it in %s)' % (name, p))
    return p.resolve()


def print_summary():
    print('==> Readout v%s with configuration:\n' % __version__)
    max_width = max(len(key) for key in OPTIONS + INFO)
    for opt in OPTIONS:
        print(f"{opt:>{max_width}} : {'ON' if installation_info['opt_%s' % opt] else 'OFF'}")
    for info in [e for e in INFO if not e == 'version']:
        print(f"{info:>{max_width}} : {lookup_choice(info)}")
    print()


def parse_cmdline():
    parser = argparse.ArgumentParser()

    parser.add_argument('-v', '--version', action='version', version=__version__,
                        help='show the Readout version number and exit')
    parser.add_argument('--intversion', action='store_true',
                        help='show Readout version encoded into single integral number (e.g. v1.3.2 is 10302) and exit')
    parser.add_argument('-s', '--summary', action='store_true',
                        help='print summary information about installation and exit')
    parser.add_argument('--show', type=str, choices=[e for e in INFO if e not in ['version']],
                        help='print requested information about Readout installation and exit')

    args = parser.parse_args()

    nargs = sum(int(bool(e)) for e in (args.show, args.summary, args.setup, args.unsetup, args.intversion))
    if nargs == 0:
        parser.error('Missing arguments. Run with --help for usage instructions.')
    if nargs > 1:
        parser.error('Too many options specified.')
    return args


def main():
    args = parse_cmdline()
    if args.summary:
        print_summary()
    elif args.show:
        print(lookup_choice(args.show))
    elif args.intversion:
        print(sum(a * b for a, b in zip((int(e) for e in __version__.split('.')), (10000, 100, 1))))
    else:
        raise SystemExit('ERROR: Missing choice (should not happen).')


if __name__ == '__main__':
    main()
