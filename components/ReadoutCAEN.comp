DEFINE COMPONENT ReadoutCAEN
DEFINITION PARAMETERS()
SETTING PARAMETERS (
string ring = 0,
string fen = 0,
string tube = 0,
string a = 0,
string b = 0,
string c = 0,
string d = 0,
string tof = "t",
string ip = 0,
int fen_value=0,
int a_value=0,
int b_value=0,
int c_value=0,
int d_value=0,
int port = 9000,
int command_port = 10800,
int broadcast = 1,
pulse_rate = 14,
int noisy=0,
noise_level=0.1,
string event_mode = "p",
string filename = 0,
int merge_mpi=1,
int keep_mpi_unmerged=0,
int verbose=0, // -1: silent, 0: errors, 1: warnings, 2: info, 3: details
int ess_type=52 // 0x34 == 52, 0x41==65
)
OUTPUT PARAMETERS ()
DEPENDENCY "-Wl,-rpath,CMD(readout-config --show libdir) -LCMD(readout-config --show libdir) -lReadout -ICMD(readout-config --show includedir)"
SHARE
%{
#include <signal.h>
#include <unistd.h> // for execve
#include <sys/time.h>
#include <stdlib.h>
#include <stdint.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <Readout.h>

  void readout_caen_error(char* named, char* variable){
    printf("ReadoutCAEN: %s: Particle variable %s inaccessible, exiting.\n", named, variable);
    exit(-1);
  }
  int readout_caen_particle_getvar_int(_class_particle* p, char* name){
      double bits = particle_getvar(p, name, 0);
      return *(int*)&bits;
  }
  int readout_caen_rand_poisson(double rate){
    //double rand_exp = -log(rand01()) / rate;
    double criteria = exp(-rate);
    int count=0;
    double prod=1;
    while ((prod *= rand01()) > criteria) ++count;
    return count;
  }
%}

DECLARE
%{
// pre-declare the stateful objects
CAEN_readout_t readout_data;
readout_t* readout_ptr;
int p_or_pp;
int fen_present;
int a_present;
int b_present;
int c_present;
int d_present;
%}

INITIALIZE
%{
char extension[128] = '\0';
char * this_filename;

// Include the header file and run any initialization for the real broadcaster
if (ip == 0 || ip[0] == '\0'){
	readout_ptr = readout_create("127.0.0.1", port, command_port, pulse_rate, ess_type);
} else {
	readout_ptr = readout_create(ip, port, command_port, pulse_rate, ess_type);
}
readout_newPacket(readout_ptr);
readout_verbose(readout_ptr, verbose);
if (!broadcast) readout_disable_network(readout_ptr);

if ((filename != NULL) && (filename[0] != '\0')){
#if defined USE_MPI
// the filename, if present should be unique for each MPI process
  MPI_MASTER(fprintf(stdout, "Message(%s): You are using HDF5 output with MPI, "
                             "hence your will get %i filenames %s.node_#i.h5 as output.\n",
                             NAME_CURRENT_COMP, mpi_node_count, filename);
  );
  sprintf(extension,"node_%i.h5",mpi_node_rank);
#else
  sprintf(extension,"h5");
#endif
  /*add output dir (if applicable) to the output filename and add extension if */
  // Append the extension to the filename
  //  -- do not use mcfull_file for this since it can not handle absolute filenames with a '.' in them
  char * actual_filename = (char *) calloc(strlen(filename)+strlen(extension)+2, sizeof(char));
  strcpy(actual_filename, filename);
  strcat(actual_filename, ".");
  strcat(actual_filename, extension);
  // still use mcfull_file in case the filename does not include path information
  this_filename = mcfull_file(actual_filename, NULL);
  // release the memory now that we have the full filename
  if (actual_filename) free(actual_filename);
  readout_dump_to(this_filename);
}

fen_present = ((fen != NULL) && (fen[0] != '\0')) ? 1 : 0;
a_present = ((a != NULL) && (a[0] != '\0')) ? 1 : 0;
b_present = ((b != NULL) && (b[0] != '\0')) ? 1 : 0;
c_present = ((c != NULL) && (c[0] != '\0')) ? 1 : 0;
d_present = ((d != NULL) && (d[0] != '\0')) ? 1 : 0;
// Make sure the provided property names are accessible -- no error checking later
int failure=0;
particle_getvar(_particle, ring, &failure); if (failure) readout_caen_error(NAME_CURRENT_COMP, ring);
if (fen_present){
    particle_getvar(_particle,  fen, &failure); if (failure) readout_caen_error(NAME_CURRENT_COMP,  fen);
}
particle_getvar(_particle, tube, &failure); if (failure) readout_caen_error(NAME_CURRENT_COMP, tube);
if (a_present){
  particle_getvar(_particle, a, &failure);
  if (failure) readout_caen_error(NAME_CURRENT_COMP, a);
}
if (b_present){
  particle_getvar(_particle, b, &failure);
  if (failure) readout_caen_error(NAME_CURRENT_COMP, b);
}
if (c_present){
  particle_getvar(_particle, c, &failure);
  if (failure) readout_caen_error(NAME_CURRENT_COMP, c);
}
if (d_present){
  particle_getvar(_particle, d, &failure);
  if (failure) readout_caen_error(NAME_CURRENT_COMP, d);
}
particle_getvar(_particle,  tof, &failure); if (failure) readout_caen_error(NAME_CURRENT_COMP,  tof);

p_or_pp = (strcmp(event_mode, "p") == 0) ? 0 : 1;
if (p_or_pp && !strcmp(event_mode, "pp")) readout_caen_error(NAME_CURRENT_COMP, "Undefined event mode");

%}

TRACE
%{
double pp = particle_getvar(_particle, "p", 0) * sqrt((double)(mcget_ncount()));
if (p_or_pp) pp *= pp;

int event_count = readout_caen_rand_poisson(pp);

int is_noise = (!event_count && noisy && rand01() < noise_level) ? 1 : 0;

int int_ring, int_fen, int_tube, int_A, int_B, int_C, int_D;
double double_tof;

if (event_count) {
  int_ring = readout_caen_particle_getvar_int(_particle, ring);
  int_fen = fen_present ? readout_caen_particle_getvar_int(_particle, fen) : fen_value;
  int_tube = readout_caen_particle_getvar_int(_particle, tube);
  int_A = a_present ? readout_caen_particle_getvar_int(_particle, a) : a_value;
  int_B = b_present ? readout_caen_particle_getvar_int(_particle, b) : b_value;
  int_C = c_present ? readout_caen_particle_getvar_int(_particle, c) : c_value;
  int_D = d_present ? readout_caen_particle_getvar_int(_particle, d) : d_value;
  double_tof = particle_getvar(_particle, tof, 0);
} else {
  int_ring = (int)(rand01() * 3);
  int_tube = (int)(rand01() * 15);
  int_fen = fen_value;
  int_A = a_present ? 100 + (int)(rand01() * 1024) : a_value;
  int_B = b_present ? 100 + (int)(rand01() * 1024) : b_value;
  int_C = c_present ? 100 + (int)(rand01() * 1024) : c_value;
  int_D = d_present ? 100 + (int)(rand01() * 1024) : d_value;
  double_tof = rand01() / pulse_rate;
}

if (is_noise) event_count = 1;

if (event_count) {
  // add error checking of int -> uintN_t values?
  uint8_t RING = (uint8_t)int_ring;
  uint8_t FEN = (uint8_t)int_fen;
  readout_data.channel = (uint8_t)int_tube;
  readout_data.a = (uint16_t)int_A;
  readout_data.b = (uint16_t)int_B;
  readout_data.c = (uint16_t)int_C;
  readout_data.d = (uint16_t)int_D;
  if (verbose > 2)
    printf("(%2u %2u %2u) %5u %5u %0.10f -- Accumulated (x %d)\n", RING, FEN, readout_data.channel, readout_data.a, readout_data.b, double_tof, event_count);
  for (int i=0; i<1 /*event_count*/; ++i){
    // Send the event to the broadcaster to be accumulated and broadcast and/or store the event to file
    readout_add(readout_ptr, RING, FEN, double_tof, p_or_pp, (const void *)(&readout_data));
  }
}
%}

FINALLY
%{
// perform any teardown of the stateful broadcaster
if (broadcast) readout_send(readout_ptr);
// Remove the interface component
readout_destroy(readout_ptr);
// combine output files if necessary: should be in a SAVE block before FINALLY, but files are not closed until now.
if ((filename != NULL) && (filename[0] != '\0') && merge_mpi){
#if defined USE_MPI
  MPI_Barrier(MPI_COMM_WORLD);
  MPI_MASTER(
      if (mpi_node_count > 1){
        char extension[128] = "h5";
        char * output_filename;

        char * real_filename = calloc(strlen(filename)+strlen(extension)+2, sizeof(char));
        strcpy(real_filename, filename);
        strcat(real_filename, ".");
        strcat(real_filename, extension);
        output_filename = mcfull_file(real_filename, NULL);

        char ** merge_filenames = calloc(mpi_node_count, sizeof(char*));
        for (int i=0; i<mpi_node_count; i++){
          char * merge_filename = calloc(strlen(filename)+strlen(extension)+100, sizeof(char));
          sprintf(merge_filename, "%s.node_%i.h5", filename, i);
          merge_filenames[i] = mcfull_file(merge_filename, NULL);
          free(merge_filename);
        }
        readout_merge_files(output_filename, merge_filenames, mpi_node_count);

        /*remove the original unmerged files if wanted*/
        if(!keep_mpi_unmerged){
          int status{0};
          for (int j=0;j<mpi_node_count;j++)
            status += remove(mpi_node_files[j]);
          if (status)
            fprintf(stderr,"Warning (%s): Could not remove one or more unmerged files.\n", NAME_CURRENT_COMP);
        }

        free(output_filename);
        for (int i=0; i<mpi_node_count; i++){
          free(merge_filenames[i]);
        }
      }
  );
#endif
}
%}

MCDISPLAY
%{
%}

END
