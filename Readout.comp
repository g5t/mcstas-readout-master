DEFINE COMPONENT Readout_Master
DEFINITION PARAMETERS()
SETTING PARAMETERS (
string ring = 0,
string fen = 0,
string tube = 0,
string a = 0,
string b = 0,
string tof = "t",
string ip = 0,
int port = 9000,
int command_port = 10800,
int broadcast = 1,
pulse_rate = 14,
int noisy=0,
noise_level=0.1,
string event_mode = "p",
event_enhancement=5e5,
string receiver = 0,
string options = 0,
string filename = 0,
int hdf5_output = 1,
int start_receiver = 1,
int verbose=0,
int ess_readout_type=52 // 0x34 == 52, 0x41==65
)
OUTPUT PARAMETERS ()
DEPENDENCY "-I/home/g/Documents/ESS/McStas/Readout_BIFROST/ -L/home/g/Documents/ESS/McStas/Readout_BIFROST/build/ -lReadoutBIFROST"
SHARE
%{
#include <signal.h>
#include <unistd.h> // for execve
#include <sys/time.h>
#include <stdlib.h>
#include <stdint.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include "ReadoutBIFROST.h"

  int pid_dead(int pid){
    struct stat sts;
    char buffer[100];
    sprintf(buffer, "/proc/%d", pid);
    if (stat(buffer, &sts) == -1 && errno == ENOENT) return 1;
    return 0;
  }
  void delay() {
    for (int i=0; i<300; ++i) sleep(0.1);
  }
  void throw_error(char* named, char* variable){
    printf("Readout_Master: %s: Particle variable %s inaccessible, exiting.\n", named, variable);
    exit(-1);
  }
  int particle_getvar_int(_class_particle* p, char* name){
      double bits = particle_getvar(p, name, 0);
      return *(int*)&bits;
  }
  int rand_poisson(double rate){
    //double rand_exp = -log(rand01()) / rate;
    double criteria = exp(-rate);
    int count=0;
    double prod=1;
    while ((prod *= rand01()) > criteria) ++count;
    return count;
  }
%}

DECLARE
%{
// pre-declare the stateful object
bifrost_readout_t* bifrost;
//
int child_pid;
%}

INITIALIZE
%{
// Include the header file and run any initialization for the real broadcaster
if (ip == 0 || ip[0] == '\0'){
	bifrost = bifrost_readout_create("127.0.0.1", port, command_port, pulse_rate, ess_readout_type);
} else {
	bifrost = bifrost_readout_create(ip, port, command_port, pulse_rate, ess_readout_type);
}
// First and 'last' pulse times set by creation function
bifrost_readout_newPacket(bifrost);

// Make sure the provided property names are accessible -- no error checking later
int failure=0;
particle_getvar(_particle, ring, &failure); if (failure) throw_error(NAME_CURRENT_COMP, ring);
particle_getvar(_particle,  fen, &failure); if (failure) throw_error(NAME_CURRENT_COMP,  fen);
particle_getvar(_particle, tube, &failure); if (failure) throw_error(NAME_CURRENT_COMP, tube);
particle_getvar(_particle,    a, &failure); if (failure) throw_error(NAME_CURRENT_COMP,    a);
particle_getvar(_particle,    b, &failure); if (failure) throw_error(NAME_CURRENT_COMP,    b);
particle_getvar(_particle,  tof, &failure); if (failure) throw_error(NAME_CURRENT_COMP,  tof);

child_pid = 0; // in case we are not spawning a child; don't try to kill one later
if (broadcast && start_receiver && (!ip || !strcmp(ip, "127.0.0.1") || !strcmp(ip, "localhost"))){
  // no-ip --> 127.0.0.1 above
  // For localhost/127.0.0.1 we should start the server 
  char outfile[PATH_MAX];
  getcwd(outfile, sizeof(outfile));
  if (dirname && dirname[0] != '\0'){
    strcat(outfile, "/");
    strcat(outfile, dirname);
  }
  strcat(outfile, "/");  
  if (filename && filename[0] != '\0'){
    strcat(outfile, filename);
  } else {
    strcat(outfile, NAME_CURRENT_COMP);
  }

  char logfile[PATH_MAX];
  strcpy(logfile, outfile);
  strcat(logfile, ".log");

  int extra_args = (hdf5_output ? 2 : 0) + 4;

  // separate the options -- we need to count the number of spaces in the options string
  char buffer[1000];
  strcpy(buffer, options);
  int n_spaces = 0;
  for (int i=0; buffer[i] != '\0'; ++i) if (buffer[i] == ' ') ++n_spaces;
  // allocate pointers for the new split arguments
  char ** newargs = calloc(n_spaces + 2 + extra_args, sizeof(char*)); // [executable, option0, ... optionN, output-flag, output-directory]
  // split and copy the strings
  char * pch;
  pch = strtok(buffer, " ");
  int index = 1;
  while (pch != NULL && index < n_spaces + 2 + extra_args) {
    newargs[index] = calloc(strlen(pch), sizeof(char));
    strcpy(newargs[index], pch);
    index++;
    pch = strtok(NULL, " ");
  }
  newargs[0] = receiver;
  // specify the receiver port
  newargs[n_spaces + 2] = "-p";
  newargs[n_spaces + 3] = calloc(10, sizeof(char));
  sprintf(newargs[n_spaces + 3], "%ld", port);
  // specify the command port
  newargs[n_spaces + 4] = "-m";
  newargs[n_spaces + 5] = calloc(10, sizeof(char));
  sprintf(newargs[n_spaces + 5], "%ld", command_port);

  if (hdf5_output) {
    newargs[n_spaces + 6] = "--dumptofile";
    // combine the directory name and filename;
    if (dirname && dirname[0] != '\0'){
      strcpy(buffer, dirname);
      strcat(buffer, "/");
    }
    strcat(outfile, ".h5"); // was "_" previously -- why did this change?
    newargs[n_spaces + 7] = outfile;
  }

  if (1 || verbose) {
    printf("Execute the call in this thread:\n\t");
    for (int i=0; i<n_spaces + 2 + extra_args; ++i){
      printf("%s ", newargs[i]);
    }
    printf("\n");
  }


  child_pid = fork();
  if (0 == child_pid) {
    // This *is* the child, setup stdout/stderr redirection
    int child_fd = open(logfile, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
    dup2(child_fd, 1); // redirect stdout to file
    dup2(child_fd, 2); // redirect stderr to file
    if (child_fd) close(child_fd); // dup'ed handles suffice for output at this point
    // change the execution stack
    char * envs[] = {NULL};
    execve(newargs[0], newargs, envs);
  }
  sleep(1);
}

%}

TRACE
%{
double pp = particle_getvar(_particle, "p", 0) * sqrt((double)(mcget_ncount()));
if (!strcmp(event_mode, "pp")) pp *= pp;
else if (strcmp(event_mode, "p")) throw_error(NAME_CURRENT_COMP, "Undefined event mode");

int event_count = rand_poisson(pp);

int is_noise = (!event_count && noisy && rand01() < noise_level) ? 1 : 0;

int int_ring, int_fen, int_tube, int_A, int_B;
double double_tof;

if (event_count) {
  int_ring = particle_getvar_int(_particle, ring);
  int_fen = particle_getvar_int(_particle, fen);
  int_tube = particle_getvar_int(_particle, tube);
  int_A = particle_getvar_int(_particle, a);
  int_B = particle_getvar_int(_particle, b);
  double_tof = particle_getvar(_particle, tof, 0);
} else {
  int_ring = (int)(rand01() * 3);
  int_tube = (int)(rand01() * 15);
  int_fen = 0; // always for BIFROST
  int_A = (int)(rand01() * 4096);
  int_B = (int)(rand01() * 4096);
  double_tof = rand01() / pulse_rate;
}

if (is_noise) event_count = 1;

if (event_count) {
  // add error checking of int -> uintN_t values?
  uint8_t RING = (uint8_t)int_ring;
  uint8_t FEN = (uint8_t)int_fen;
  uint8_t TUBE = (uint8_t)int_tube;
  uint16_t A = (uint16_t)int_A;
  uint16_t B = (uint16_t)int_B;
  
  //printf("(%2u %2u %2u) %5u %5u %0.10f -- Accumulated (x %d)\n", RING, FEN, TUBE, A, B, double_tof, event_count);
  for (int i=0; i<1 /*event_count*/; ++i){
    // Send the event to the broadcaster to be accumulated and broadcast
    if (broadcast) bifrost_readout_add(bifrost, RING, FEN, double_tof, TUBE, A, B);
  }
}
%}

FINALLY
%{
// perform any teardown of the stateful broadcaster
if (broadcast) bifrost_readout_send(bifrost);
// Shut down the remote component if we started it locally and it's still running
if (child_pid && !pid_dead(child_pid)) {
	printf("Readout_BIFROST=%s: Stopping child with pid %d:\n", NAME_CURRENT_COMP, child_pid);
  int res = bifrost_readout_shutdown(bifrost);
  if (res) {
    // See if the child exists *and* we are allowed to ask the child to stop
    sleep(1);
  	int res = kill(child_pid, 0);
  	if (res) {printf("Child %d is still running\n", child_pid);}
  	if (!res){ // no error, no-signal succeeded
  	  res = kill(child_pid, SIGINT);
      sleep(2);
      if (!pid_dead(child_pid)){
  		  res = kill(child_pid, SIGTERM);
  		  sleep(2);
  		}
      if (!pid_dead(child_pid)){
        res = kill(child_pid, SIGKILL);
      }
  	}
  }
}
// Remove the interface component
bifrost_readout_destroy(bifrost);

%}

MCDISPLAY
%{
%}

END
